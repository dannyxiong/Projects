package com.cooksys.fbws.hibernate;
// Generated Jul 9, 2015 2:35:58 PM by Hibernate Tools 3.4.0.CR1


import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * Pages generated by hbm2java
 */
@Entity
@Table(name="pages"
    ,catalog="fakebook"
    , uniqueConstraints = @UniqueConstraint(columnNames="title") 
)
public class Pages  implements java.io.Serializable {


     private Integer pageId;
     private Users users;
     private String title;
     private String description;
     private Date createdDate;
     private int active;
     private Set<WallPostLikes> wallPostLikeses = new HashSet<WallPostLikes>(0);
     private Set<Likes> likesesForPageId = new HashSet<Likes>(0);
     private Set<PageWallPosts> pageWallPostsesForPageId = new HashSet<PageWallPosts>(0);
     private Set<PageWallPosts> pageWallPostsesForOtherId = new HashSet<PageWallPosts>(0);
     private Set<Likes> likesesForOtherId = new HashSet<Likes>(0);
     private Set<WallPosts> wallPostsesForPostingPageId = new HashSet<WallPosts>(0);
     private Set<Ignores> ignoreses = new HashSet<Ignores>(0);
     private Set<WallPosts> wallPostsesForPageId = new HashSet<WallPosts>(0);

    public Pages() {
    }

	
    public Pages(Users users, String title, Date createdDate, int active) {
        this.users = users;
        this.title = title;
        this.createdDate = createdDate;
        this.active = active;
    }
    public Pages(Users users, String title, String description, Date createdDate, int active, Set<WallPostLikes> wallPostLikeses, Set<Likes> likesesForPageId, Set<PageWallPosts> pageWallPostsesForPageId, Set<PageWallPosts> pageWallPostsesForOtherId, Set<Likes> likesesForOtherId, Set<WallPosts> wallPostsesForPostingPageId, Set<Ignores> ignoreses, Set<WallPosts> wallPostsesForPageId) {
       this.users = users;
       this.title = title;
       this.description = description;
       this.createdDate = createdDate;
       this.active = active;
       this.wallPostLikeses = wallPostLikeses;
       this.likesesForPageId = likesesForPageId;
       this.pageWallPostsesForPageId = pageWallPostsesForPageId;
       this.pageWallPostsesForOtherId = pageWallPostsesForOtherId;
       this.likesesForOtherId = likesesForOtherId;
       this.wallPostsesForPostingPageId = wallPostsesForPostingPageId;
       this.ignoreses = ignoreses;
       this.wallPostsesForPageId = wallPostsesForPageId;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)

    
    @Column(name="page_id", unique=true, nullable=false)
    public Integer getPageId() {
        return this.pageId;
    }
    
    public void setPageId(Integer pageId) {
        this.pageId = pageId;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="owner_id", nullable=false)
    public Users getUsers() {
        return this.users;
    }
    
    public void setUsers(Users users) {
        this.users = users;
    }

    
    @Column(name="title", unique=true, nullable=false, length=127)
    public String getTitle() {
        return this.title;
    }
    
    public void setTitle(String title) {
        this.title = title;
    }

    
    @Column(name="description", length=1024)
    public String getDescription() {
        return this.description;
    }
    
    public void setDescription(String description) {
        this.description = description;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="created_date", nullable=false, length=19)
    public Date getCreatedDate() {
        return this.createdDate;
    }
    
    public void setCreatedDate(Date createdDate) {
        this.createdDate = createdDate;
    }

    
    @Column(name="active", nullable=false)
    public int getActive() {
        return this.active;
    }
    
    public void setActive(int active) {
        this.active = active;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="pages")
    public Set<WallPostLikes> getWallPostLikeses() {
        return this.wallPostLikeses;
    }
    
    public void setWallPostLikeses(Set<WallPostLikes> wallPostLikeses) {
        this.wallPostLikeses = wallPostLikeses;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="pagesByPageId")
    public Set<Likes> getLikesesForPageId() {
        return this.likesesForPageId;
    }
    
    public void setLikesesForPageId(Set<Likes> likesesForPageId) {
        this.likesesForPageId = likesesForPageId;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="pagesByPageId")
    public Set<PageWallPosts> getPageWallPostsesForPageId() {
        return this.pageWallPostsesForPageId;
    }
    
    public void setPageWallPostsesForPageId(Set<PageWallPosts> pageWallPostsesForPageId) {
        this.pageWallPostsesForPageId = pageWallPostsesForPageId;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="pagesByOtherId")
    public Set<PageWallPosts> getPageWallPostsesForOtherId() {
        return this.pageWallPostsesForOtherId;
    }
    
    public void setPageWallPostsesForOtherId(Set<PageWallPosts> pageWallPostsesForOtherId) {
        this.pageWallPostsesForOtherId = pageWallPostsesForOtherId;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="pagesByOtherId")
    public Set<Likes> getLikesesForOtherId() {
        return this.likesesForOtherId;
    }
    
    public void setLikesesForOtherId(Set<Likes> likesesForOtherId) {
        this.likesesForOtherId = likesesForOtherId;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="pagesByPostingPageId")
    public Set<WallPosts> getWallPostsesForPostingPageId() {
        return this.wallPostsesForPostingPageId;
    }
    
    public void setWallPostsesForPostingPageId(Set<WallPosts> wallPostsesForPostingPageId) {
        this.wallPostsesForPostingPageId = wallPostsesForPostingPageId;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="pages")
    public Set<Ignores> getIgnoreses() {
        return this.ignoreses;
    }
    
    public void setIgnoreses(Set<Ignores> ignoreses) {
        this.ignoreses = ignoreses;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="pagesByPageId")
    public Set<WallPosts> getWallPostsesForPageId() {
        return this.wallPostsesForPageId;
    }
    
    public void setWallPostsesForPageId(Set<WallPosts> wallPostsesForPageId) {
        this.wallPostsesForPageId = wallPostsesForPageId;
    }




}


